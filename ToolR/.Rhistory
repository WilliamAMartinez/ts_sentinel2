r1
r
x
r1
r1 = t(array(df$layer , dim = c(r@ncols , r@nrows)))
r1
copyr = r
copyr
r2= r1*2
r2
r2
values(copyr) = r2
copyr
values(copyr)
x <- array(c(1:20),dim = c(2,5,2))
x
r = raster(x)
B1 = raster(x[,,1])
B2 = raster(x[,,2])
B3 = stack(B1,B2)
B3
df =  as.data.frame(B3)
df
df$y = df$layer.1 * df$layer.2
df
array(df$y, dim = c(B1@nrows,B2@ncols))
COPY_B1 = B1
values(COPY_B1) = Y
Y = array(df$y, dim = c(B1@nrows,B2@ncols))
values(COPY_B1) = Y
COPY_B1
plot(COPY_B1)
B3
x
Y
df
Y
Y = t(array(df$y, dim = c(B1@ncols,B2@nrows)))
Y
x
median(c(0.88, 1.15, 0.92))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(stars)
#Dates of the images
day_shoot = c("2017/01/15", "2017/04/05", "2017/05/25", "2017/06/14","2017/07/29",
"2017/08/13","2017/09/12", "2017/10/12", "2017/11/16", "2017/12/16")
path_file = '/home/user/Documents/TESISMASTER/csv/Results/Validation_models/Evaluation_models.csv'
#reading file with the final results of classifications
df = read.csv(path_file,sep = ",",header = T)
library(sf)
library(trendgrid)
list_ncfile = c("precip.2015.nc","precip.2016.nc","precip.2017.nc")
# Name of the ncdf files
dname <- "precip"  # note: precipitation
#direction of the files
p2015 = system.file("nc/precip.2015.nc",package="trendgrid")
p2016 = system.file("nc/precip.2016.nc",package="trendgrid")
p2017 = system.file("nc/precip.2017.nc",package="trendgrid")
#agroupinf the files in a vector
list_ncfile = c(p2015,p2016,p2017)
#calling the shapefile
contour_col = read_sf(system.file("port/Limit_Portugal.shp",package="trendgrid"))
output <- clip_netcdf(list_ncfile,dname,contour_col)
output
summary(output)
library(ggplot2)
library(viridis)
dataf = output$data
ggplot() + geom_tile(data=dataf[dataf$time==output$time[30],], aes(x=lon, y=lat, fill=value), alpha=0.8) +
facet_wrap("time") +
scale_fill_viridis() +
coord_equal()
agr = function(y) sum(y,na.rm=TRUE)
newoutput = changeduration(output, agr , intervale = c("month"))
newoutput
dataf = newoutput$data
dataf_2015 = dataf[dataf$time %in% c(newoutput$time[1:12]),]
dataf_2015$month <- factor(dataf_2015[,"layer"],labels = month.abb)
ggplot() + geom_tile(data = dataf_2015, aes(x=lon, y=lat, fill=value), alpha=0.8) +
facet_wrap("month") +
coord_equal() +
scale_fill_viridis() +
ggtitle("accumulative values of precipitation per month, 2015")
ggplot() + geom_tile(data = dataf_2015, aes(x=lon, y=lat, fill=value), alpha=0.8) +
facet_wrap("month") +
coord_equal() +
scale_fill_viridis() +
ggtitle("accumulative values of precipitation per month, 2015")
ggplot() + geom_tile(data = dataf_2015, aes(x=lon, y=lat, fill=value), alpha=0.8) +
facet_wrap("month") +
coord_equal() +
scale_fill_viridis() #+
#ggtitle("accumulative values of precipitation per month, 2015")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(stars)
library(raster)
folders_path = '/home/user/Documents/TESISMASTER/IMAGES/TO_PROCESS_10m/Prediction/STATIC/IM_20170729'
read_raster = function(x){
y = raster::raster(paste0(folders_path,"/",x))
names(y) = "IM"
return(y)
}
list_raster = lapply(list.files(folders_path)[c(1,4,10,11)],read_raster)
library(stars)
library(raster)
folders_path = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\STATIC\\IM_20170729'
read_raster = function(x){
y = raster::raster(paste0(folders_path,"/",x))
names(y) = "IM"
return(y)
}
list_raster = lapply(list.files(folders_path)[c(1,4,10,11)],read_raster)
rasters_stack = stack(list_raster)
names(rasters_stack)  = c("BLUE","B05","B8A","NDVI")
#converting to stars object
rasters_stars = st_as_stars(rasters_stack)
plot(rasters_stars)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
#importing shapefile
library(sf)
library(tmap)
#importing shapefile
library(sf)
library(tmap)
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
install.packages("tmap")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(stars)
library(raster)
folders_path = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\STATIC\\IM_20170729'
read_raster = function(x){
y = raster::raster(paste0(folders_path,"/",x))
names(y) = "IM"
return(y)
}
list_raster = lapply(list.files(folders_path)[c(1,4,10,11)],read_raster)
rasters_stack = stack(list_raster)
names(rasters_stack)  = c("BLUE","B05","B8A","NDVI")
#converting to stars object
rasters_stars = st_as_stars(rasters_stack)
plot(rasters_stars)
#importing shapefile
library(sf)
library(tmap)
install_github("mtennekes/tmap")}
install_github("mtennekes/tmap")
library(devtools)
install_github("mtennekes/tmap")
install_github("mtennekes/tmap")
library(devtools)
install_github("mtennekes/tmap")
install.packages("base64enc")
library(devtools)
install_github("mtennekes/tmap")
install.packages("png")
library(devtools)
install_github("mtennekes/tmap")
library(devtools)
install_github("mtennekes/tmap")
library(devtools)
install_github("mtennekes/tmap")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(stars)
library(raster)
<<<<<<< HEAD
library(stars)
library(raster)
folders_path = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\STATIC\\IM_20170729'
=======
library(stars)
library(raster)
folders_path = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\STATIC\\IM_20170729'
folders_path = '/home/user/Documents/TESISMASTER/IMAGES/TO_PROCESS_10m/Prediction/STATIC/IM_20170729'
read_raster = function(x){
y = raster::raster(paste0(folders_path,"/",x))
names(y) = "IM"
return(y)
}
list_raster = lapply(list.files(folders_path)[c(1,4,10,11)],read_raster)
library(stars)
library(raster)
folders_path = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\STATIC\\IM_20170729'
read_raster = function(x){
y = raster::raster(paste0(folders_path,"/",x))
names(y) = "IM"
return(y)
}
list_raster = lapply(list.files(folders_path)[c(1,4,10,11)],read_raster)
rasters_stack = stack(list_raster)
names(rasters_stack)  = c("BLUE","B05","B8A","NDVI")
#converting to stars object
rasters_stars = st_as_stars(rasters_stack)
plot(rasters_stars)
library(tmap)
df = read.csv(file)
file = 'D:\\OTROS\\Matheus\\table_data.csv'
file = 'D:\\OTROS\\Matheus\\table_data.csv'
df = read.csv(file)
file
df = read.csv(file, sep = ';', header = T)
df
df = read.csv(file, sep = ';', header = T, dec = ',')
df
df$interview
head(df)
##ggplot
p <- ggplot(df , aes(x=interview, y=area ,fill = mobile))
print(p)
library(ggplot2)
library(ggplot2)
p <- ggplot(df , aes(x=interview, y=area ,fill = mobile))
print(p)
df
head(df)
df$mobile
df$mobile <- as.factor(df$mobile)
p <- ggplot(df , aes(x=interview, y=area ,fill = mobile))
print(p)
df$interview
df$time
df$area *2
p <- ggplot(df , aes(x=interview, y=area))
print(p)
df
df$mobile <- as.factor(df$mobile)
p <- ggplot(df , aes(x=interview, y=area ,fill = mobile)) +
geom_boxplot()
print(p)
var.test()
p1 = df[df$interview == 'face-to-face',]
p2 = df[df$interview == 'online',]
p1
var.test(p1$area,p2$area)
library(raster)
library(rasterVis)
library(animation)
library(classInt)
require(installr)
install.packages("installr")
library(raster)
library(rasterVis)
library(animation)
library(classInt)
require(installr)
install.packages("stringi")
library(raster)
library(rasterVis)
library(animation)
library(classInt)
require(installr)
file = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\PREDICTION\\COMP50'
read_raster = function(x){
y = raster::raster(paste0(file,"\\",x))
return(y)
}
list_raster = lapply(list.files(file),read_raster)
rasters_stack = raster::brick(list_raster)
setwd
setwd('D:\\TESISMASTER\\ts_sentinel2\\ToolR')
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
})
install.packages("magick")
library(magick)
help(saveGIF)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
})
getwd*()
getwd()
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
})
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
}, interval=0.2, movie.name="animation.gif")
?im.convert
ani.options(convert = 'C:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe')
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
}, interval=0.2, movie.name="animation.gif")
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation.gif")
getwd()
#importinf images
file = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\PREDICTION\\COMP20'
read_raster = function(x){
y = raster::raster(paste0(file,"\\",x))
return(y)
}
list_raster = lapply(list.files(file),read_raster)
#importinf images
file = 'D:\\TESISMASTER\\IMAGES\\TO_PROCESS_10m\\Prediction\\PREDICTION\\COMP20'
read_raster = function(x){
y = raster::raster(paste0(file,"\\",x))
return(y)
}
list_raster = lapply(list.files(file),read_raster)
rasters_stack = raster::brick(list_raster)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation2.gif")
list(at=c(1:9)
()
help(levelplot)
plot(rasters_stack[[1]])
plot(l)
colorRampPalette(c('blue', 'green', 'purple', 'yellow', 'red'))(30)
col_l <- colorRampPalette(c('blue', 'green', 'purple', 'yellow', 'red'))(9)
col_l
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], col.regions = col_l , labels=c(as.character(c(1:9))), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation3.gif")
col_l
help(levelplot)
x <- seq(pi/4, 5 * pi, length.out = 100)
y <- seq(pi/4, 5 * pi, length.out = 100)
r <- as.vector(sqrt(outer(x^2, y^2, "+")))
grid <- expand.grid(x=x, y=y)
grid$z <- cos(r^2) * exp(-r/(pi^3))
levelplot(z~x*y, grid, cuts = 50, scales=list(log="e"), xlab="",
ylab="", main="Weird Function", sub="with log scales",
colorkey = FALSE, region = TRUE)
#S-PLUS example
require(stats)
attach(environmental)
ozo.m <- loess((ozone^(1/3)) ~ wind * temperature * radiation,
parametric = c("radiation", "wind"), span = 1, degree = 2)
w.marginal <- seq(min(wind), max(wind), length.out = 50)
t.marginal <- seq(min(temperature), max(temperature), length.out = 50)
r.marginal <- seq(min(radiation), max(radiation), length.out = 4)
wtr.marginal <- list(wind = w.marginal, temperature = t.marginal,
radiation = r.marginal)
grid <- expand.grid(wtr.marginal)
grid[, "fit"] <- c(predict(ozo.m, grid))
contourplot(fit ~ wind * temperature | radiation, data = grid,
cuts = 10, region = TRUE,
xlab = "Wind Speed (mph)",
ylab = "Temperature (F)",
main = "Cube Root Ozone (cube root ppb)")
detach()
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], col.regions = col_l , labels=c(as.character(c(1:9))), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation3.gif")
classes <- classIntervals(values(r), n=5, style="fisher", precision = 3)
brks <- classes$brks
brks <- round(brks, 2)
r <- raster(ncol=40, nrow=20)
classes <- classIntervals(values(r), n=5, style="fisher", precision = 3)
brks <- classes$brks
brks <- round(brks, 2)
library(raster)
library(rasterVis)
library(animation)
library(classInt)
r <- raster(ncol=40, nrow=20)
r[] <- rnorm(n=ncell(r))
s <- stack(x=c(r, r*r, r*r*r, r*r*r*r))
classes <- classIntervals(values(r), n=5, style="fisher", precision = 3)
brks <- classes$brks
brks <- round(brks, 2)
brks
list_raster = lapply(list.files(file),read_raster)
rasters_stack = raster::brick(list_raster)
col_l <- colorRampPalette(c('blue', 'green', 'purple', 'yellow', 'red'))(9)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=brks, labels=c(as.character(brks))), col.regions=col.l, margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation3.gif")
i=1
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
plot(l)
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
plot(l)
levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation3.gif")
pal10 <- c("#33A02C", "#B2DF8A", "#FF0000",  "#FDBF6F", "#999999", "#556E19","#003200" , "#A6CEE3","#1F78B4", "#C133FF")
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), col.regions=col_l, margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=c(as.character(c(1:9)))), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
label_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_and_shrubs" )
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=
label_classes), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
label_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_anlabel_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_and_shrubs" )d_shrubs" )
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=
label_classes), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
label_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_and_shrubs" )
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], colorkey=list(at=c(1:9), labels=
label_classes), margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], margin=FALSE)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], margin=FALSE,at=c(1:9))
plot(l)
}
}, interval=2, movie.name="animation4.gif")
help(levelplot)
, "#A6CEE3","#1F78B4")
label_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_and_shrubs" )
#colorkey=list(at=c(1:9), labels=label_classes)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], margin=FALSE,at=c(1:9), col.regions = pal9)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
pal9 <- c("#33A02C", "#B2DF8A", "#FF0000",  "#FDBF6F", "#999999", "#556E19","#003200" , "#A6CEE3","#1F78B4")
label_classes = c("Eucalyptus_trees","Herbaceous","Sealed", "Non_vegetated","Rice_fields","Holm_and_Cork_Trees","Coniferous_trees", "Wetlands",
"Water","Bushes_and_shrubs" )
#colorkey=list(at=c(1:9), labels=label_classes)
saveGIF({
for(i in c(1:nlayers(rasters_stack))){
l <- levelplot(rasters_stack[[i]], margin=FALSE,at=c(1:9), col.regions = pal9)
plot(l)
}
}, interval=2, movie.name="animation4.gif")
