geom_bar(stat="identity") +
scale_fill_manual("Classes", values = colors_classes) +
geom_text(aes(label = freq,y = pos),size = 2)
rm(list=ls())
library("shinyWidgets")
library(tibble)
library(sf)
library(rgdal)
library(raster)
library(ggplot2)
#seasons of the imagery
se = c("Spring","Summer","Autumn", "Winter")
seasons = factor(se, levels = se)
inputPanel(
sliderTextInput(
inputId = "a",
label = "Season range slider:",
choices = seasons,
selected = seasons[1])
)
renderPlot({
#selection
ind = which(input$a==seasons)
#shapefile
shape_file = "./shp/water_class2.shp"
points_water = sf::read_sf(shape_file)
#generate plots based on input$a
dir_raster = "./data"
file_raster = list.files(dir_raster)
r = vector("list",4)
j = 1
for(i in file_raster){
if(endsWith(i, "clip1.tif"))
{
r[[j]] = raster(paste0(dir_raster,"/",i))
j = j + 1
}
}
selec_col = points_water[,input$a]
st_geometry(selec_col) = NULL
colnames(selec_col) = c("axis")
color_points = bg = c("red", "blue")[unclass(as.factor(selec_col$axis))]
plot(r[[ind]],zlim = c(-1, 1), main = paste0("NDVI over Estuaries, date: ", input$a))
plot(points_water[,1], add= TRUE, pch = 16, col= color_points , cex = 0.5)
legend("topright",legend=c("non-vegetated", "water") ,col=c("red","blue"),pch=16,bty="n",cex=1,pt.cex=1)
})
#file = "./shp/training_samples_cleaned.shp"
file = "./shp/training_samples_composites_cleaned.shp"
data_ndvi = sf::read_sf(file)
#classes with vegetation
classes_names = c("Coniferous_trees", "Eucalyptus_trees","Holm_and_Cork_Trees","Bushes_and_shrubs", "Herbaceous_periodic",
"Natural_Herbaceous","Herbaceous_permanet","Rice_fields","Water","Wetlands","Sealed","Non_vegetated")
#query over previous class
query_veget = data_ndvi[data_ndvi$CLASS_NAME %in% classes_names[1:6] ,-1]
#geometry
geo = st_geometry(query_veget)
st_geometry(query_veget) =  NULL
#function to separate non-vegetation
vegetation = function(v, cl){
y = v
tr = 0.3
y[v >= tr] = cl[v >= tr]
y[v < tr] = "Non_vegetated"
return(y)
}
list_veget = lapply(query_veget[,-1], vegetation, cl = query_veget$CLASS_NAME)
df_veget = data.frame(list_veget)
#Merging geometry to data frame
st_geometry(df_veget) = geo
#merging rest of the classes
df_rest = data_ndvi[!(data_ndvi$CLASS_NAME %in% classes_names[1:6]),-1]
geo2 = st_geometry(df_rest)
st_geometry(df_rest) = NULL
labeldf = function(x, cl) x[] = cl
list_rest = lapply(df_rest[,-1],labeldf, cl = df_rest$CLASS_NAME)
df_rest2 = data.frame(list_rest)
st_geometry(df_rest2) = geo2
#merging
df_final = rbind(df_veget,df_rest2)
#Names of the colums
#names_images =  c('20170115', "20170405", "20170525", "20170604", "20170614",'20170704', '20170709', '20170714', '20170724', '20170729', '20170803', '20170808', '20170813', '20170818', '20170902', '20170907', '20170912', '20170922', '20170927', '20171002', '20171012', '20171022', '20171027', '20171111', '20171116', '20171121', '20171201', '20171216', '20171221',"geometry")
#colnames(df_final) = names_images
#writing objet sf as shapefile
#file_out = './shp/temporal_dataset_composites.shp'
#sf::write_sf(df_final, dsn = file_out)
df_final
season
library("shinyWidgets")
library(tibble)
library(sf)
library(rgdal)
library(raster)
library(ggplot2)
#seasons of the imagery
se = c("Spring","Summer","Autumn", "Winter")
seasons = factor(se, levels = se)
inputPanel(
sliderTextInput(
inputId = "a",
label = "Season range slider:",
choices = seasons,
selected = seasons[1])
)
renderPlot({
#selection
ind = which(input$a==seasons)
#shapefile
shape_file = "./shp/water_class2.shp"
points_water = sf::read_sf(shape_file)
#generate plots based on input$a
dir_raster = "./data"
file_raster = list.files(dir_raster)
r = vector("list",4)
j = 1
for(i in file_raster){
if(endsWith(i, "clip1.tif"))
{
r[[j]] = raster(paste0(dir_raster,"/",i))
j = j + 1
}
}
selec_col = points_water[,input$a]
st_geometry(selec_col) = NULL
colnames(selec_col) = c("axis")
color_points = bg = c("red", "blue")[unclass(as.factor(selec_col$axis))]
plot(r[[ind]],zlim = c(-1, 1), main = paste0("NDVI over Estuaries, date: ", input$a))
plot(points_water[,1], add= TRUE, pch = 16, col= color_points , cex = 0.5)
legend("topright",legend=c("non-vegetated", "water") ,col=c("red","blue"),pch=16,bty="n",cex=1,pt.cex=1)
})
#removing geometry
st_geometry(df_final) = NULL
#Days of the images
#day_shoot = c("2017/01/15", "2017/04/05", "2017/05/25", "2017/06/04", "2017/06/14",
#              "2017/07/04", "2017/07/09", "2017/07/14", "2017/07/24", "2017/07/29",
#              "2017/08/03", "2017/08/08", "2017/08/13", "2017/08/18", "2017/09/02" ,
#              "2017/09/07", "2017/09/12", "2017/09/22", "2017/09/27", "2017/10/02",
#              "2017/10/12", "2017/10/22", "2017/10/27", "2017/11/11", "2017/11/16",
#              "2017/11/21", "2017/12/01","2017/12/16", "2017/12/21")
output = NULL
list_df_final = lapply(df_final,function(x) table(x))
j = 1
for(i in list_df_final){
dft = data.frame(seasons[j],i)
colnames(dft) = c("Date","Class","freq")
output = rbind(output, dft)
j = j + 1
}
#defining position of the text
output$halffreq = output$freq *0.5
output$pos = 1
for(i in output$Date){
ind1 = which(output$Date == i)
out1 = output[ind1,]
out0 = 0
for(j in classes_names){
ind2 = which(out1$Class == j)
out0 = out0 + out1[ind2,3]
output[ind1[ind2],5] = dim(df_final)[1] - (out0 - output[ind1[ind2],4])
}
}
output$Class = factor(output$Class, classes_names)
#colors in the graphic
colors_classes = c("green4", "green3", "green1", "springgreen3", "springgreen1", "darkolivegreen3", "turquoise","plum2","blue2","royalblue2", "gray", "goldenrod")
names(colors_classes) = classes_names
ggplot(data=output, aes(x=Date, y=freq, fill= Class)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") +
scale_fill_manual("Classes", values = colors_classes) +
geom_text(aes(label = freq,y = pos),size = 2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(sf)
library(ggplot2)
folder_path = "/home/user/Documents/TESISMASTER/VECTOR/Analysis_outliers/training_samples2.shp"
#Days of the images
day_shoot = c("2017/01/15", "2017/04/05", "2017/05/25", "2017/06/04", "2017/06/14",
"2017/07/04", "2017/07/09", "2017/07/14", "2017/07/24", "2017/07/29",
"2017/08/03", "2017/08/08", "2017/08/13", "2017/08/18", "2017/09/02" ,
"2017/09/07", "2017/09/12", "2017/09/22", "2017/09/27", "2017/10/02",
"2017/10/12", "2017/10/22", "2017/10/27", "2017/11/11", "2017/11/16",
"2017/11/21", "2017/12/01","2017/12/16", "2017/12/21")
#converting days characters to time format in R
day_shoot= strptime(as.character(day_shoot), "%Y/%m/%d")
#reading shapefile
dataset = sf::read_sf(folder_path)
rm(list=ls())
library(sf)
library(ggplot2)
folder_path = "/home/user/Documents/TESISMASTER/VECTOR/Analysis_outliers/training_samples2.shp"
#Days of the images
day_shoot = c("2017/01/15", "2017/04/05", "2017/05/25", "2017/06/04", "2017/06/14",
"2017/07/04", "2017/07/09", "2017/07/14", "2017/07/24", "2017/07/29",
"2017/08/03", "2017/08/08", "2017/08/13", "2017/08/18", "2017/09/02" ,
"2017/09/07", "2017/09/12", "2017/09/22", "2017/09/27", "2017/10/02",
"2017/10/12", "2017/10/22", "2017/10/27", "2017/11/11", "2017/11/16",
"2017/11/21", "2017/12/01","2017/12/16", "2017/12/21")
#converting days characters to time format in R
day_shoot= strptime(as.character(day_shoot), "%Y/%m/%d")
#reading shapefile
dataset = sf::read_sf(folder_path)
model1 =  function(x, min_x, max_x){
ind_t = which(x< min_x | x > max_x)
if(length(ind_t)!=0){
x[ind_t] = NA
}
qua = quantile(x,na.rm=TRUE)
q25 =qua[2]
q75 =qua[4]
IQR = q75 - q25
limit_left = q25 - 1.5*IQR
limit_rigth = q75 + 1.5*IQR
ind = which(x<= limit_left | x >= limit_rigth | is.na(x))
return(ind)
}
model2 =  function(x, min_x, max_x){
ind_t = which(x< min_x | x > max_x)
if(length(ind_t)!=0){
x[ind_t] = NA
}
sd_x = sd(x,na.rm = TRUE)
mean_x = mean(x,na.rm = TRUE)
limit_left = mean_x - 2*sd_x
limit_rigth = mean_x + 2*sd_x
#filter according with the threshold and central tendency criterium
ind = which(x < limit_left | x > limit_rigth | is.na(x))
return(ind)
}
df_without_outliers = function(query_dataset,
methodo = c("None","model_1", "model_2"),
day_shoot,min_x =-1, max_x = 1){
#selecting model
list_out = vector("list",2)
func_choice <- switch(methodo,
'None'='None',
'model_1'=model1,
'model_2'=model2
)
st_geometry(query_dataset) = NULL
w = NULL
if(is.function(func_choice)){
outlier_indices = apply(query_dataset,2,func_choice, min_x, max_x)
for(j in outlier_indices)
{
if(length(j)!= 0){
w = c(w,j)
}
}
#removing repeated values and quering only valid values
query_dataset_vv = query_dataset[-unique(w),]
list_out[[1]] = length(unique(w))
list_out[[2]] = unique(w)
}else{
query_dataset_vv = query_dataset
list_out[[1]] = 0
list_out[[2]] = 0
}
output_all = NULL
for(i in 1:dim(query_dataset_vv)[2])
{
trajectory = as.factor(c(1:dim(query_dataset_vv)[1]))
ndvi_day_output = data.frame(day_shoot[i],trajectory,query_dataset_vv[,i])
colnames(ndvi_day_output) = c('Days','Trajectory','NDVI')
output_all = rbind(output_all, ndvi_day_output)
}
#Converting day in time format
output_all$Days = as.Date(output_all$Days)
list_out[[3]] = output_all
return(list_out)
#done
}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(sf)
library(ggplot2)
folder_path = "/home/user/Documents/TESISMASTER/VECTOR/Analysis_Outliers_Composites/training_samples_composites.shp"
#Days of the images
se = c("Spring","Summer","Autumn", "Winter")
season = factor(se, levels = se)
#reading shapefile
dataset = sf::read_sf(folder_path)
dataset
model1 =  function(x, min_x, max_x){
ind_t = which(x< min_x | x > max_x)
if(length(ind_t)!=0){
x[ind_t] = NA
}
qua = quantile(x,na.rm=TRUE)
q25 =qua[2]
q75 =qua[4]
IQR = q75 - q25
limit_left = q25 - 1.5*IQR
limit_rigth = q75 + 1.5*IQR
ind = which(x<= limit_left | x >= limit_rigth | is.na(x))
return(ind)
}
model2 =  function(x, min_x, max_x){
ind_t = which(x< min_x | x > max_x)
if(length(ind_t)!=0){
x[ind_t] = NA
}
sd_x = sd(x,na.rm = TRUE)
mean_x = mean(x,na.rm = TRUE)
limit_left = mean_x - 2*sd_x
limit_rigth = mean_x + 2*sd_x
#filter according with the threshold and central tendency criterium
ind = which(x < limit_left | x > limit_rigth | is.na(x))
return(ind)
}
df_without_outliers = function(query_dataset,
methodo = c("None","model_1", "model_2"),
season,min_x =-1, max_x = 1){
#selecting model
list_out = vector("list",2)
func_choice <- switch(methodo,
'None'='None',
'model_1'=model1,
'model_2'=model2
)
st_geometry(query_dataset) = NULL
w = NULL
if(is.function(func_choice)){
outlier_indices = apply(query_dataset,2,func_choice, min_x, max_x)
for(j in outlier_indices)
{
if(length(j)!= 0){
w = c(w,j)
}
}
#removing repeated values and quering only valid values
query_dataset_vv = query_dataset[-unique(w),]
list_out[[1]] = length(unique(w))
list_out[[2]] = unique(w)
}else{
query_dataset_vv = query_dataset
list_out[[1]] = 0
list_out[[2]] = 0
}
output_all = NULL
for(i in 1:dim(query_dataset_vv)[2])
{
trajectory = as.factor(c(1:dim(query_dataset_vv)[1]))
ndvi_day_output = data.frame(season[i],trajectory,query_dataset_vv[,i])
colnames(ndvi_day_output) = c('Season','Trajectory','NDVI')
output_all = rbind(output_all, ndvi_day_output)
}
list_out[[3]] = output_all
return(list_out)
#done
}
query_dataset = dataset[dataset$CLASS_NAME == "Rice_fields",c(-1,-2)]
df = df_without_outliers(query_dataset,methodo = "None", season)
#graphic
ggplot(df[[3]], aes(x=Season)) +
geom_line(aes(y=NDVI, group=Trajectory, color='blue'),show.legend = FALSE) +
theme(axis.text=element_text(size=13)) +
labs(title="Time Series Rice Fields per season",
subtitle=paste0("Row data"," 1000 samples, ", df[[1]], " out, ", (df[[1]]/1000)*100,"%" ),
y="NDVI",
color=NULL)
df1 = df_without_outliers(query_dataset,methodo = 'model_1', season, min_x = 0, max_x = 1)
#graphic
ggplot(df1[[3]], aes(x=Season)) +
geom_line(aes(y=NDVI, group=Trajectory, color='red'),show.legend = FALSE) +
labs(title="Time Series Rice fields",
subtitle=paste0("Method: IQR ± 1.5Q, from 1000 samples ", df1[[1]], " are out: ", (df1[[1]]/1000)*100,"%" ),
y="NDVI",
color=NULL)
df2 = df_without_outliers(query_dataset,methodo = 'model_2', season, min_x = 0, max_x = 1)
#graphic
ggplot(df2[[3]], aes(x=Season)) +
geom_line(aes(y=NDVI, group=Trajectory, color='red'),show.legend = FALSE) +
labs(title="Time Series Rice fields per season",
subtitle=paste0("Method: Mean ± sd, from 1000 samples ", df2[[1]], " are out: ", (df2[[1]]/1000)*100,"%" ),
y="NDVI",
color=NULL)
classes_cl = c("Holm_and_Cork_Trees", "Bushes_and_shrubs", "Rice_fields", "Coniferous_trees", "Eucalyptus_trees",
"Herbaceous_permanet","Natural_Herbaceous" , "Herbaceous_periodic")
dataset2 = dataset[1,]
for( i in classes_cl){
index = which(dataset$CLASS_NAME == i)
query_dataset_f = dataset[index,c(-1,-2)]
#Here everithing with trees will have a treshold range of 0.3 to 1
if(i == "Holm_and_Cork_Trees" | i == "Coniferous_trees"| i == "Eucalyptus_trees"){
min_x = 0.3
max_x = 1
}else
{
min_x = 0
max_x = 1
}
df = df_without_outliers(query_dataset_f,methodo = "model_1", season, min_x, max_x)
index2 = index[-df[[2]]]
dataset2 = rbind(dataset2, dataset[index2,])
}
#removing first column
dataset2 = dataset2[-1,]
output_df =  NULL
for(w in classes_cl){
len_d1 = length(which(dataset$CLASS_NAME == w))
len_d2 = length(which(dataset2$CLASS_NAME == w))
ln_data = c(len_d1-len_d2,len_d2)
per_data = (ln_data/1000)*100
position = c(100 - per_data[1]*0.5,per_data[2]*0.5)
name_data = c("Data out","New Data")
ldf = data.frame(w,name_data,ln_data,per_data,position)
output_df = rbind(output_df, ldf)
}
colnames(output_df) = c("Classes","Data","Len","percentage","pos")
# Stacked barplot with multiple groups
ggplot(data=output_df , aes(x=Classes, y=percentage, fill=Data)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(percentage,"%"), y= pos))
classes_cl = c("Holm_and_Cork_Trees", "Bushes_and_shrubs", "Rice_fields", "Coniferous_trees", "Eucalyptus_trees",
"Herbaceous_permanet","Natural_Herbaceous" , "Herbaceous_periodic")
dataset2 = dataset[1,]
for( i in classes_cl){
index = which(dataset$CLASS_NAME == i)
query_dataset_f = dataset[index,c(-1,-2)]
#Here everithing with trees will have a treshold range of 0.3 to 1
if(i == "Holm_and_Cork_Trees" | i == "Coniferous_trees"| i == "Eucalyptus_trees"){
min_x = 0.3
max_x = 1
}else
{
min_x = 0
max_x = 1
}
df = df_without_outliers(query_dataset_f,methodo = "model_2", season, min_x, max_x)
index2 = index[-df[[2]]]
dataset2 = rbind(dataset2, dataset[index2,])
}
#removing first column
dataset2 = dataset2[-1,]
output_df =  NULL
for(w in classes_cl){
len_d1 = length(which(dataset$CLASS_NAME == w))
len_d2 = length(which(dataset2$CLASS_NAME == w))
ln_data = c(len_d1-len_d2,len_d2)
per_data = (ln_data/1000)*100
position = c(100 - per_data[1]*0.5,per_data[2]*0.5)
name_data = c("Data out","New Data")
ldf = data.frame(w,name_data,ln_data,per_data,position)
output_df = rbind(output_df, ldf)
}
colnames(output_df) = c("Classes","Data","Len","percentage","pos")
# Stacked barplot with multiple groups
ggplot(data=output_df , aes(x=Classes, y=percentage, fill=Data)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") +
geom_text(aes(label = paste0(percentage,"%"), y= pos))
statistics = function(x){
q50 = median(x,na.rm=TRUE)
left_limit = min(x,na.rm=TRUE)
rigth_limit = max(x,na.rm=TRUE)
res = c(q50, left_limit, rigth_limit)
return(res)
}
trajectories =  function(data_st){
st_geometry(data_st) = NULL
trajectories_df = NULL
cl_name = c("class",colnames(data_st)[-1])
colnames(data_st) = cl_name
for(k in unique(data_st$class)){
index = which(data_st$class == k)
trajectories = apply(data_st[index,c(-1)], 2, statistics)
trajectories_confidence = data.frame(k,season,t(trajectories))
colnames(trajectories_confidence) = c('id','Season','median','lower_limit','upper_limit')
trajectories_df = rbind(trajectories_df,trajectories_confidence)
}
return(trajectories_df)
}
dataset_sealed = dataset[dataset$CLASS_NAME == "Sealed" , ]
table_sealed = table(dataset_sealed$DESCRICAO)
df_sealed = data.frame(table_sealed , pos= as.numeric(table_sealed)*0.5)
ggplot(data=df_sealed , aes(x=Var1, y=Freq)) +
coord_flip() +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label = Freq, y= pos))
query1_dataset_sealed = dataset_sealed[dataset_sealed$DESCRICAO %in% c("1.2.2.01.1 Rede viária e espaços associados",
"1.2.1.01.1 Indústria",
"1.1.1.02.1 Tecido urbano contínuo predominantemente horizontal"),]
#graphic
trajectories_query1_dataset_sealed = trajectories(query1_dataset_sealed[,-2])
ggplot(trajectories_query1_dataset_sealed, aes(x=Season, y=median, color = id)) +
geom_line(aes(x=Season, y = median, color=id)) +
geom_ribbon(aes(ymin=lower_limit,ymax=upper_limit,fill=id),color="grey70",alpha=0.4)+
facet_grid(id~.)+ theme(legend.position="none")
query2_dataset_sealed = dataset_sealed[dataset_sealed$DESCRICAO %in% c("1.1.2.01.1 Tecido urbano descontínuo",
"1.1.2.02.1 Tecido urbano descontínuo esparso",
"1.2.1.03.1 Instalações agrícolas"),]
#graphic
trajectories_query2_dataset_sealed = trajectories(query2_dataset_sealed[,-2])
ggplot(trajectories_query2_dataset_sealed, aes(x=Season, y=median, color = id)) +
geom_line(aes(x=Season, y = median, color=id)) +
geom_ribbon(aes(ymin=lower_limit,ymax=upper_limit,fill=id),color="grey70",alpha=0.4)+
facet_grid(id~.)+ theme(legend.position="none")
query3_dataset_sealed = dataset_sealed[!(dataset_sealed$DESCRICAO%in%c("1.1.2.01.1 Tecido urbano descontínuo",
"1.1.2.02.1 Tecido urbano descontínuo esparso",
"1.2.1.03.1 Instalações agrícolas")),]
df_query3 = df_without_outliers(query3_dataset_sealed[,c(-1,-2)], methodo = 'model_1', season, min_x = 0, max_x = 1)
#graphic
ggplot(df_query3[[3]], aes(x=Season)) +
geom_line(aes(y=NDVI, group=Trajectory, color='red'),show.legend = FALSE) +
labs(title="Time Series sealed",
subtitle=paste0("Method: IQR ± 1.5IQR, from 541 samples ", df_query3[[1]], " are out: ", round((df_query3[[1]]/542)*100,2),"%" ),
y="NDVI",
color=NULL)
new_dataset_sealed = query3_dataset_sealed[-df_query3[[2]],]
new_dataset_sealed
